'''
给定一个正整数n，找到并返回n的二进制表示中两个相邻1之间的最长距离。
如果不存在两个相邻的1，返回0。如果只有0将两个1分隔开可能不存在0，则认为这两个1彼此相邻。
两个1之间的距离是它们的二进制表示中位置的绝对差。例如，"1001" 中的两个 1 的距离为 3 。
示例 1： 输入：n = 22 输出：2 解释： 22 的二进制是 "10110"。
在 22 的二进制表示中，有三个 1，组成两对相邻的1。第一对相邻的1中，两个1之间的距离为2。
第二对相邻的1中，两个1之间的距离为1。 答案取两个距离之中最大的，也就是 2 。
示例 2： 输入：n = 5 输出：2 解释： 5 的二进制是 "101" 。
示例 3： 输入：n = 6 输出：1 解释： 6 的二进制是 "110" 。
示例 4： 输入：n = 8 输出：0 解释： 8 的二进制是 "1000" 。
在 8 的二进制表示中没有相邻的两个 1，所以返回 0 。
示例 5： 输入：n = 1 输出：0
提示： 1 <= N <= 10^9
'''

def binaryGap(n):
    n = bin(n)[2:]
    ans, p = 0, -1
    for i in range(len(n)):
        if n[i] == '1':
            if p != -1:
                ans = max(i - p, ans)
            p = i
    return ans
    
print(binaryGap(22))
print(binaryGap(5))
print(binaryGap(6))
print(binaryGap(8))
print(binaryGap(1))

#96.93
#39.85