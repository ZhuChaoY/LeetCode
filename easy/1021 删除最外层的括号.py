'''
有效括号字符串为空("")、"(" + A + ")"或A+B，其中A和B都是有效的括号字符串，+代表字符串
的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。如果有效字符串S
非空，且不存在将其拆分为S=A+B的方法，我们称其为原语（primitive），其中A和B都是非空有效
括号字符串。给出一个非空有效字符串S，考虑将其进行原语化分解，
使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。
对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。
示例 1：输入："(()())(())"  输出："()()()"  解释：输入字符串为 "(()())(())"，原语化
分解得"(()())" + "(())"，删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。
示例 2：输入："(()())(())(()(()))" 输出："()()()()(())"  解释： 输入字符串为
"(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。
示例 3：输入："()()" 输出：""  解释： 输入字符串为 "()()"，原语化分解得 "()" + "()"，
删除每个部分中的最外层括号后得到 "" + "" = ""。
提示： S.length <= 10000  S[i] 为 "(" 或 ")"   S 是一个有效括号字符串
'''

def removeOuterParentheses(s):
    flag, k, ans = True, 0, ''
    for x in s:
        if x == '(':
            if flag:
                flag = False
            else:
                k += 1
                ans += x
        else:
            if k != 0:
                k -= 1
                ans += x
            else:
                flag = True
    return ans
    
print(removeOuterParentheses('(()())(())'))
print(removeOuterParentheses('(()())(())(()(()))'))
print(removeOuterParentheses('()()'))  
      
#62.03
#44.29