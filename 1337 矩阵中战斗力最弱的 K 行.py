'''
给你一个大小为m*n的矩阵 mat，矩阵由若干军人和平民组成，分别用1和0表示。请你返回矩阵中
战斗力最弱的k行的索引，按从最弱到最强排序。如果第i行的军人数量少于第j行，或者两行军人
数量相同但i小于j，那么我们认为第 i 行的战斗力比第 j 行弱。
军人总是排在一行中的靠前位置，也就是说 1 总是出现在 0 之前。
示例 1：输入：mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3  输出：[2,0,3]
解释： 每行中的军人数目：
行 0 -> 2 
行 1 -> 4 
行 2 -> 1 
行 3 -> 2 
行 4 -> 5 
从最弱到最强对这些行排序后得到 [2,0,3,1,4]
示例 2：输入：mat = 
[[1,0,0,0],
 [1,1,1,1],
 [1,0,0,0],
 [1,0,0,0]], 
k = 2 输出：[0,2]
解释：  每行中的军人数目：
行 0 -> 1 
行 1 -> 4 
行 2 -> 1 
行 3 -> 1 
从最弱到最强对这些行排序后得到 [0,2,3,1]
提示： m == mat.length  n == mat[i].length  2 <= n, m <= 100   1 <= k <= m
matrix[i][j] 不是 0 就是 1
'''

def kWeakestRows(mat, k):
    m, n = len(mat), len(mat[0])
    tmp, ans = [], []
    for j in range(n):
        for i in range(m):
            if i not in ans:
                if mat[i][j] == 0:
                    ans.append(i)                    
                    if len(ans) == k:
                        return ans
                else:
                    if j == n - 1:
                        tmp.append(i)
    return (ans + tmp)[:k]
    
print(kWeakestRows([[1, 1, 0, 0, 0],
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 0],
                    [1, 1, 0, 0, 0],
                    [1, 1, 1, 1, 1]], 3))
print(kWeakestRows([[1, 0, 0, 0],
                    [1, 1, 1, 1],
                    [1, 0, 0, 0],
                    [1, 0, 0, 0]], 2))
print(kWeakestRows([[1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1],
                    [1, 1, 1, 1, 1, 1]], 1))
print(kWeakestRows([[1, 1, 0], [1, 1, 0], [1, 1, 1], 
                    [1, 1, 1], [0, 0, 0], [1, 1, 1], [1, 0, 0]], 6))

#80.41
#15.20







